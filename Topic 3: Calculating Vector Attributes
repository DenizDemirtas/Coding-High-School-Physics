### Glowscript must be installed for visualization###

GlowScript 2.7 VPython
make_grid()

vector1 = x_y(5,4,color.red)
vector2 = mag_degrees(-4,45,color.blue)

print( "red x-component =",vector1.xcomp )
print( "red y-component =",vector1.ycomp )
print( "red magnitude = ",vector1.mag )
print( "red degrees = ",vector1.degrees )
print( "red radians = ",vector1.radians )

print("---------------------------------------")

print("blue x-component =", vector2.xcomp)
print("blue y-component =", vector2.ycomp)
print("blue magnitude =", vector2.mag)
print("blue degrees =", vector2.degrees)
print("blue radians =", vector2.radians)

print("---------------------------------------")


print("Since mag^2 = xcomp^2+ycomp^2")
print(" vector2.xcomp**2+vector2.ycomp**2=",vector2.xcomp**2+vector2.ycomp**2 )
print( "vector2.mag**2 is equal to =",vector2.mag**2 )

print("----------------------------------------")



print("Since cos(theta) = xcomp/mag")
print("cos(theta)=", cos(vector2.radians) )
print( "vector2.xcomp/vector2.mag is equal to =",vector2.xcomp/vector2.mag 




def make_grid():
  scene.background = color.white
  thickness = 0.02
  dx = 1
  xmax = 5
  x = -xmax
  while (x <= xmax):
    y = -xmax
    gridline = curve(pos=[vector(x,y,-thickness)],color=color.black,radius=thickness)
    while (y <= xmax):
      gridline.append(vector(x,y,-thickness))
      y = y + dx
    x = x + dx
  y = -xmax
  while (y <= xmax):
    x = -xmax
    gridline = curve(pos=[vector(x,y,-thickness)],color=color.black,radius=thickness)
    while (x <= xmax):
      gridline.append(vector(x,y,-thickness))
      x = x + dx
    y = y + dx
  return

def mag_degrees(mag,degrees,color):
  
  sleep(1)
  vec = make_vector("mag-degrees",mag,degrees,color)
  return vec

def x_y(xcomp,ycomp,color):

  sleep(1)
  vec = make_vector("x-y",xcomp,ycomp,color)
  return vec

def start_end(start,end,color):
 
  sleep(1)
  vec = make_vector("start-end",start,end,color)
  return vec

def make_vector(instruction,in1,in2,color):
  if (instruction=="mag-degrees"):
 
    mag = in1
    angle = in2
  
    xcomp = mag*cos(angle*pi/180)
    ycomp = mag*sin(angle*pi/180)
    
    start = vector(0,0,0)
    end = vector(xcomp+start.x,ycomp+start.y,0)
  else if (instruction=="x-y"):

    xcomp = in1
    ycomp = in2
    mag = (xcomp**2+ycomp**2)**0.5
    angle = atan(ycomp/xcomp)*180/pi
    start = vector(0,0,0)
    end = vector(xcomp+start.x,ycomp+start.y,0)
  else if (instruction=="start-end"):

    start = vector(in1[0],in1[1],0)
    end = vector(in2[0],in2[1],0)
    xcomp = end.x-start.x
    ycomp = end.y-start.y
    
    mag = (xcomp**2+ycomp**2)**0.5
    angle = atan(ycomp/xcomp)*180/pi
  else:
    
    print("error in make_vector! instructions not supplied")
    return

  vec = arrow(pos=start,axis=vector(xcomp,ycomp,0),color=color,shaftwidth=0.1)

  vec.xcomp = xcomp
  vec.ycomp = ycomp
  vec.mag = mag
  vec.degrees = angle
  vec.radians = angle*pi/180
  vec.start = start
  vec.end = end
  
  return vec
